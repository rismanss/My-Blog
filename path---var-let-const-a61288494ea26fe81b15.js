webpackJsonp([0xd4f4544154cf],{491:function(n,a){n.exports={data:{site:{siteMetadata:{title:"Kamarul Risman",author:"Kamarul Risman"}},markdownRemark:{id:"/home/risman/Belajar baru/Blog/gatsby-blog/src/pages/var-let-const/index.md absPath of file >>> MarkdownRemark",html:'<p>Di sini saya akan membahas perbedaan antara <em><strong>var</strong>, <strong>let</strong> dan <strong>const</strong> dalam Javascript</em>.</p>\n<p><strong><em>var</em></strong> adalah sebuah cara untuk mendeklarasikan sebuah variabel yang sudah ada sejak <strong>ES5</strong> sedangkan <strong><em>let</em></strong> dan <strong><em>const</em></strong> adalah sebuah fitur baru untuk mendeklarasikan sebuah variabel yang ada pada <strong>ES6</strong>.</p>\n<p>Berikut adalah pembahasan satu persatu tentang perbedaan dari masing-masing.</p>\n<h3>~ var</h3>\n<p>variabel yang di deklarasikan dengan <strong><em>var</em></strong> bersifat global selama masih dalam cakupan sebuah function dan nilai atau valuenya dapat di rubah.</p>\n<p>Mari kita lihat contoh berikut :</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'didalam loop \'</span> <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token comment">// i = 0, 1, 2, 3, 4</span>\n  <span class="token punctuation">}</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'diluar loop, dalam cakupan function \'</span> <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token comment">// i = 5</span>\n<span class="token punctuation">}</span>\n<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'diluar function\'</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token comment">// i is not defined</span>\n</code></pre>\n      </div>\n<p>kita dapat melihat <strong><em>var i</em></strong> yang dipanggil diluar <strong><em>for</em></strong> akan tetapi masih didalam cakupan function dapat di definisikan, dan ketika kita memanggilnya diluar function <strong><em>var i</em></strong> tidak dapat di definisikan.\nMari kita lihat contoh lainnya :</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">\'teks\'</span>\n\n<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  x <span class="token operator">=</span> <span class="token string">\'coba ubah teks 1\'</span>\n  <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    x <span class="token operator">=</span> <span class="token string">\'coba ubah teks 2\'</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// outpunya adalah \'coba ubah teks 2\'</span>\n</code></pre>\n      </div>\n<p>dari contoh ke dua kita dapat melihat nilai dari <strong><em>var x</em></strong> dapat di rubah, artinya nilai atau value variabel yang dideklasri dengan <strong><em>var</em></strong> dapat di rubah.</p>\n<h3>~ let</h3>\n<p>variabel yang dideklarasi dengan <strong><em>let</em></strong> nilai atau valuenya sama seperti <strong><em>var</em></strong> yaitu dapat di rubah dan bersifat block scope.</p>\n<p>Mari kita coba dengan contoh yang sama :</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'didalam loop \'</span> <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token comment">// i = 0, 1, 2, 3, 4</span>\n  <span class="token punctuation">}</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'diluar loop, dalam cakupan function \'</span> <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token comment">// i is not defined</span>\n<span class="token punctuation">}</span>\n<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'diluar function\'</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token comment">// i is not defined</span>\n</code></pre>\n      </div>\n<p>dari contoh di atas kita dapat melihat <strong><em>let i</em></strong> tidak dapat di panggil di luar <strong><em>for</em></strong> dan di luar function <strong><em>a()</em></strong>.</p>\n<p>contoh ke dua :</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token string">\'teks\'</span>\n\n<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  x <span class="token operator">=</span> <span class="token string">\'coba ubah teks 1\'</span>\n  <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    x <span class="token operator">=</span> <span class="token string">\'coba ubah teks 2\'</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// outpunya adalah \'coba ubah teks 2\'</span>\n</code></pre>\n      </div>\n<p>sama seperti <strong><em>var</em></strong> kita dapat melihat nilai dari <strong><em>let x</em></strong> dapat di rubah, artinya nilai atau value variabel yang dideklasri dengan <strong><em>let</em></strong> dapat di rubah.</p>\n<h3>~ const</h3>\n<p>variabel yang dideklarikan dengan <strong><em>const</em></strong> sama seperti <strong><em>let</em></strong> yaitu bersifat block scope, perbedaannya adalah nilai atau value pada <strong><em>const</em></strong> tidak dapat dirubah seperti <strong><em>var</em></strong> dan <strong><em>let</em></strong> atau bersifat constant.</p>\n<p>Mari kita lihat contoh berikut :</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token string">\'teks\'</span>\na <span class="token operator">=</span> <span class="token string">\'rubah teks\'</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// Assignment to constant variable.</span>\n</code></pre>\n      </div>\n<p>dapat di lihat kita telah merubah nilai dari <strong><em>const a</em></strong> dari <em>“teks”</em> ke <em>“rubah teks”</em> ketika variabel <strong><em>a</em></strong> yang dideklarasikan dengan <strong><em>const</em></strong> di panggil maka akan menghasilkan error.</p>\n<p>Mari kita lihat contoh lain :</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token punctuation">:</span> <span class="token string">\'risman\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\nlist<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">\'kamarul\'</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment">// kamarul</span>\n</code></pre>\n      </div>\n<p>dari contoh di atas kode dapat berjalan karena perubahan bukan dilakukan pada level variabel yang bersifat constant melainkan perubahan dilakukan pada level properties dari object tersebut.</p>\n<h3>Kesimpulan</h3>\n<ul>\n<li>variabel yang dideklarasikan dengan <strong><em>var</em></strong> dapat di rubah dan dapat digunakan di dalam lingkup fungsi (function scope).</li>\n<li>variabel yang dideklarasikan dengan <strong><em>let</em></strong> dapat di rubah dan hanya bisa diakses dalam satu blok (block scope)</li>\n<li>sedangkan variabel yang dideklarasikan dengan <strong><em>const</em></strong> bersifat sama dengan <strong><em>let</em></strong>, hanya saja variabel yang dideklarasikan dengan <strong><em>const</em></strong> tidak dapat dirubah atau bersifat constant.</li>\n</ul>\n<p><strong><em>var</em></strong>, <strong><em>let</em></strong> dan <strong><em>const</em></strong> dapat digunakan sesuai kebutuhannya masing-masing. Terimakasih telah membaca dan semoga bermanfaat.</p>',frontmatter:{title:"var, let dan const",date:"January 15, 2018"}}},pathContext:{slug:"/var-let-const/",previous:{fields:{slug:"/Asynchronous-Synchronous/"},frontmatter:{title:"Asynchronous dan Synchronous"}},next:!1}}}});
//# sourceMappingURL=path---var-let-const-a61288494ea26fe81b15.js.map